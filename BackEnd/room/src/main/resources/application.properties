spring.data.mongodb.database=room_DB
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017

server.port=8088
subo8.app.jwtCookieName= subo8
subo8.app.jwtSecret= SecretKey!
subo8.app.jwtExpirationMs= 86400000
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
##for our real database connection
#spring.datasource.url = jdbc:mysql://localhost:3306/test
#spring.datasource.username = root
#spring.datasource.password = example
#server.port=8088
#spring.jpa.show-sql = true
#spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#
spring.application.name=room-service
##server.port=8080
##
###DB sample property
##sample.datasource.url=jdbc:mysql://localhost/sample?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
##sample.datasource.username=local-user
##sample.datasource.password=local-password
##
### DB DEV env property
##spring.config.activate.on-profile=dev
##spring.datasource.url=${sample.datasource.url}
##spring.datasource.username=${sample.datasource.username}
##spring.datasource.password=${sample.datasource.password}
##
### DB PRE-PROD env property
##spring.config.activate.on-profile=pre-prod
##spring.datasource.url=${sample.datasource.url}
##spring.datasource.username=${sample.datasource.username}
##spring.datasource.password=${sample.datasource.password}
##
#### Hibernate Properties
### The SQL dialect makes Hibernate generate better SQL for the chosen database
##spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
##spring.jpa.generate-ddl=true
##spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
##
### Hibernate ddl auto (create, create-drop, validate, update)
##spring.jpa.hibernate.ddl-auto=update
##spring.jpa.defer-datasource-initialization=true
##spring.sql.init.mode=always
#

